"deb_import"

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load(":util.bzl", "util")

_DEB_IMPORT_BUILD_TMPL = """
# TODO: https://github.com/bazel-contrib/rules_oci/pull/523
_RECOMPRESS_CMD = "$(ZSTD_BIN) -f --decompress $< --stdout | $(ZSTD_BIN) - --format=gzip >$@"
genrule(
    name = "data",
    srcs = glob(["data.tar.*"]),
    outs = ["data.tar.gz"],
    cmd = _RECOMPRESS_CMD,
    toolchains = ["@zstd_toolchains//:resolved_toolchain"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "control",
    srcs = glob(["control.tar.*"]),
    visibility = ["//visibility:public"],
)
"""

def make_deb_import_key(repo_name, package):
    return "{}_{}_{}_{}".format(
        repo_name,
        util.sanitize(package.name),
        package.arch,
        util.sanitize(package.version),
    )

def deb_import(name, url, sha256):
    http_archive(
        name = name,
        url = url,
        sha256 = sha256,
        build_file_content = _DEB_IMPORT_BUILD_TMPL,
    )

def _deb_import_tmpl(repo_name, package):
    deb_import_key = make_deb_import_key(repo_name, package)

    return '''\
    deb_import(
        name = "{name}",
        url = "{url}",
        sha256 = "{sha256}",
    )
'''.format(name = deb_import_key, url = package.url, sha256 = package.sha256)

def deb_packages(repo_name, packages):
    deb_imports = [
        _deb_import_tmpl(repo_name, package)
        for architectures in packages.values()
        for package in architectures.values()
    ]

    return '''\
"""Generated by rules_distroless. DO NOT EDIT."""
load("@rules_distroless//apt/private:deb_import.bzl", "deb_import")

# buildifier: disable=function-docstring
def {repo_name}_packages():
{deb_imports}
'''.format(
        repo_name = repo_name,
        deb_imports = "\n".join(deb_imports) if deb_imports else "    pass",
    )

def package_arch_build(package, repo_prefix, repo_name, arch_template):
    def deps_str(dependencies, arch, depth):
        return ("\n" + " " * depth).join([
            '"//%s/%s",' % (dep.name, arch)
            for dep in dependencies
        ])

    deb_import_key = make_deb_import_key(repo_name, package)

    deps = '[":data"]'
    if package.dependencies:
        deps += """ + [
        {deps}
    ]""".format(deps = deps_str(package.dependencies, package.arch, 8))
    deps += ","

    return arch_template.format(
        target_name = package.arch,
        src = '"@%s%s//:data"' % (repo_prefix, deb_import_key),
        deps = deps,
        urls = [package.url],
        name = package.name,
        arch = package.arch,
        sha256 = package.sha256,
        repo_name = "%s%s" % (repo_prefix, deb_import_key),
    )
