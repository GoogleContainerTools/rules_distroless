"apt-get"

load(":lockfile.bzl", "lockfile")

# header template for packages.bzl file
_DEB_IMPORT_HEADER_TMPL = '''\
"""Generated by rules_distroless. DO NOT EDIT."""
load("@rules_distroless//apt/private:deb_import.bzl", "deb_import")

# buildifier: disable=function-docstring
def {}_packages():
'''

# deb_import template for packages.bzl file
_DEB_IMPORT_TMPL = '''\
    deb_import(
        name = "{name}",
        urls = {urls},
        sha256 = "{sha256}",
    )
'''

_BUILD_TMPL = """\
exports_files(glob(['packages.bzl']))

alias(
    name = "lock",
    actual = "@{}_resolve//:lock"
)
"""

def _deb_package_index_impl(rctx):
    lock_content = rctx.attr.lock_content
    package_template = rctx.read(rctx.attr.package_template)
    lockf = lockfile.from_json(rctx, lock_content if lock_content else rctx.read(rctx.attr.lock))

    package_defs = []

    if not lock_content:
        package_defs = [_DEB_IMPORT_HEADER_TMPL.format(rctx.attr.name)]

        if len(lockf.packages()) < 1:
            package_defs.append("   pass")

    for (package) in lockf.packages():
        package_key = lockfile.make_package_key(
            package["name"],
            package["version"],
            package["arch"],
        )

        if not lock_content:
            package_defs.append(
                _DEB_IMPORT_TMPL.format(
                    name = "%s_%s" % (rctx.attr.name, package_key),
                    package_name = package["name"],
                    urls = [package["url"]],
                    sha256 = package["sha256"],
                ),
            )

        repo_name = "%s%s_%s" % ("@" if lock_content else "", rctx.attr.name, package_key)

        rctx.file(
            "%s/%s/BUILD.bazel" % (package["name"], package["arch"]),
            package_template.format(
                target_name = package["arch"],
                src = '"@%s//:data"' % repo_name,
                deps = ",\n        ".join([
                    '"//%s/%s"' % (dep["name"], package["arch"])
                    for dep in package["dependencies"]
                ]),
                urls = [package["url"]],
                name = package["name"],
                arch = package["arch"],
                sha256 = package["sha256"],
                repo_name = "%s" % repo_name,
            ),
        )

    rctx.file("packages.bzl", "\n".join(package_defs))
    rctx.file("BUILD.bazel", _BUILD_TMPL.format(rctx.attr.name.split("~")[-1]))

deb_package_index = repository_rule(
    implementation = _deb_package_index_impl,
    attrs = {
        "lock": attr.label(),
        "lock_content": attr.string(doc = "INTERNAL: DO NOT USE"),
        "package_template": attr.label(default = "//apt/private:package.BUILD.tmpl"),
    },
)
